Template: The keyword template is used to define function template and class template.

A template is a simple and yet very powerful tool in C++. The simple idea is to pass data type as a parameter so that
we donâ€™t need to write the same code for different data types. For example, a software company may need sort() for 
different data types. Rather than writing and maintaining the multiple codes, we can write one sort() and pass data 
type as a parameter.

-> It is a way to make your function or class generalize as far as data type is concerned

* using namespace std
(using : it is a keyword, namespace std: means that you are going to use classes or functions (if any) from "std" 
         namespace, so you don't have to explicitly call the namespace to access them.)

Used at two places:
1. Function templates: suppose you want a function which can work for both double and int. Then we 
                       can do function overloading. But if you want to save yourself from fdoing all that 
                       stuff again you can use "function template".
   NOTE: function template also called generic function.
   
   Syntax: template<class type> type_funName(arg1,arg2,..)
   
   Example:  template <class X>
             X big(X a,X b)
             {
                if(a>b)
                    return a;
                else
                    return b;
             }
             
             int main()
             {
               cout<<big(4,5);    //if we will pass int value then X will become int.
               cout<<big(5.6,3.4); // if we will pass double type values, then X will become double
             }
             
2. Class template
   SYNTAX: template <class type>
   
   Class Templates Like function templates, class templates are useful when a class defines something that is independent 
   of the data type. Can be useful for classes like LinkedList, BinaryTree, Stack, Queue, Array, etc.

Example
#include <iostream> 
using namespace std; 
  
template <typename T> 
class Array { 
private: 
    T *ptr; 
    int size; 
public: 
    Array(T arr[], int s); 
    void print(); 
}; 
  
template <typename T> 
Array<T>::Array(T arr[], int s) { 
    ptr = new T[s]; 
    size = s; 
    for(int i = 0; i < size; i++) 
        ptr[i] = arr[i]; 
} 
  
template <typename T> 

void Array<T>::print() { 
    for (int i = 0; i < size; i++) 
        cout<<" "<<*(ptr + i); 
    cout<<endl; 
} 
  
int main() { 
    int arr[5] = {1, 2, 3, 4, 5}; 
    Array<int> a(arr, 5); 
    a.print(); 
    return 0; 
} 

Q: Can there be more than one arguments to templates?
Yes, like normal parameters, we can pass more than one data types as arguments to templates. 

Q: Can we specify default value for template arguments?
Yes, like normal parameters, we can specify default arguments to templates.

Q: What is the difference between function overloading and templates?
Both function overloading and templates are examples of polymorphism feature of OOP. 
Function overloading is used when multiple functions do similar operations, templates are used 
when multiple functions do identical operations.

*********************************************************************************************************************************************************
Template Specialization in C++

https://www.geeksforgeeks.org/template-specialization-c/

     
