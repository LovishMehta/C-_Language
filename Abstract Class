Abstract class

Pure virtual function : A do nothing function is called a pure function. It has no defination.
                                                                       or
A pure virtual function (or abstract function) in C++ is a virtual function for which we donâ€™t have implementation, we only declare it.
A pure virtual function is declared by assigning 0 in declaration.

class person
{
  public:
  void fun()=0;
 };
 
 class student : public person
 {
   public:
   void fun()
   { }
};   
 
 1. If we create an object of person class and call the fun() function than it will be wrong because it has no defination.
    So we cannot make object of person class or any base class which has pure virtual function.
 
 2. We can access the fun() function of person class (i.e. base class) using derived class i.e. we can make object of derived class
    and then access fun() function , But than this will also be wrong because we should not be able access than function in any way
    
    So one more rule was introduced that, it is necessary to do "overriding" in derived class. So we will give defination of fun() function.
    In this way if we make object of derived class and try to access the fun() function than the overriden function fun() present in derived 
    class will be callled.
    
3. Now there is a 3rd way in which the fun() function of base class (person class) can still be called i.e. if we make pointer of type base class 
  and store address of objects of derived class
    person *obj = new student;
    obj->fun(); // this will access the fun() function of base class because of early binding/
             // In early binding that class is accesed which has same type as of "obj" not the class of which the pointer is containing address of.
             
     So to avoid the prooblem of early binding we make the function fun() in base class as virtual 
     then this function is called a "pure virtual function".
     
 class person
{
  public:
  virtual void fun()=0;  //pure virtual function
 };
 
 class student : public person
 {
   public:
   void fun()
   { }
}; 

*****************************
Abstract Class
*****************************
A class containing pure vitual function is an abstract class
=> We can not instantiate abstract class (i.e. we cannot make object of abstract class)

Some Interesting Facts:
1) A class is abstract if it has at least one pure virtual function.
2) We can have pointers and references of abstract class type.


#include<iostream> 
using namespace std; 
  
class Base 
{ 
public: 
    virtual void show() = 0; 
}; 
  
class Derived: public Base 
{ 
public: 
    void show() { cout << "In Derived \n"; } 
}; 
  
int main(void) 
{ 
    Base *bp = new Derived(); 
    bp->show(); 
    return 0; 
}

3) If we do not override the pure virtual function in derived class,
   then derived class also becomes abstract class. (i.e then we will not be able to make objects of even derived class)
   
#include<iostream> 
using namespace std; 
class Base 
{ 
public: 
    virtual void show() = 0; 
}; 
  
class Derived : public Base { }; 
  
int main(void) 
{ 
  Derived d; 
  return 0; 
}

Compiler Error: cannot declare variable 'd' to be of abstract type 
'Derived'  because the following virtual functions are pure within
'Derived': virtual void Base::show() 

4) An abstract class can have constructors.


#include<iostream> 
using namespace std; 
  
// An abstract class with constructor 
class Base 
{ 
protected: 
   int x; 
public: 
  virtual void fun() = 0; 
  Base(int i) { x = i; } 
}; 
  
class Derived: public Base 
{ 
    int y; 
public: 
    Derived(int i, int j):Base(i) 
    { 
       y = j; 
    } 
    void fun() { cout << "x = " << x << ", y = " << y; } 
}; 
  
int main(void) 
{ 
    Derived d(4, 5); 
    d.fun(); 
    return 0; 
} 

Output:
x = 4, y = 5
