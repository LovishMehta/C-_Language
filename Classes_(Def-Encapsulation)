=> A Class is a user defined data-type which has data members and member functions.

=> Data members are the data variables and member functions are the functions used to manipulate these variables and together
   these data members and member functions defines the properties and behavior of the objects in a Class.
   
=> An Object is an instance of a Class. When a class is defined, no memory is allocated but when it is 
   instantiated (i.e. an object is created) memory is allocated. (instance means example)
   ( We can say Object is a "variable" defined using class data type)
   
=> Now when we want to define a function outside the class but we want it to be the member function of class then 
  we use "membership label" and declare the function inside the class.
 
   syntax => ( return_type class_name :: function_name(argument) )
 Example:
 #include<iostream>
 using namespace std;
 
 class complex{
  int a,b;        //private by default
 public:
 void set_data(int,int)                // declaring the function inside the class
 };
 
 void complex:: set_data(int x,int y)  // defining function outside the class using membership label.
 {
  a=x;
  b=y;
 } 
 
 void main()
 {
  clrscr();
  complex c1;
  c1.set_data(3,4);
  }
  
  NOTE: if define the function within the class than it's inline function by default.
        But if we declare the function outside the class than it's not inline function by default. We will have to write inline 
        keyword before the name of the function during declaration of the function.
        
  ***********
  Terms 
  ***********
  
  1. Instance member variables: a,b are the varibles of instances i.e. object created from class not the class variables.
  (Also called Attributes, data members, fields, properties)
  2. Instance member functions: set_data(int,int) is a function of instance i.e. of object . Its not class function. 
                                That's different.
    (Also called Methods, procedures,actions,operations,services)
 
 => In classes the data members should not be directly accesed, they should be accesed using member functions.
 
  **************
  Encapsulation
  **************
  Encapsulation is a process of combining data members and functions in a single unit called class. 
  This is to prevent the access to the data directly, the access to them is provided through the functions of the class. 
  It is one of the popular feature of Object Oriented Programming(OOPs) that helps in data hiding.
  
The process of implementing encapsulation can be sub-divided into two steps:
1. The data members should be labeled as private using the private access specifiers
2. The member function which manipulates the data members should be labeled as public using the public access specifier
  
  
 
